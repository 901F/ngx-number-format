{"version":3,"sources":["ng://ngx-number-format/lib/ngx-number-format.directive.ts","ng://ngx-number-format/lib/ngx-number-format.module.ts"],"names":["NgxNumberFormatDirective","el","this","_oldValueForDetectChange","_oldValue","_displayValue","_max","_decimal","_format","_specialKeys","_regExNumber","RegExp","_regExNumberAndDecimal","_oldSelectionStart","_detectDelete","_detectBackspace","_detectSelectAll","_process","onChange","_","onTouch","prototype","ngOnInit","_formElement","nativeElement","Object","defineProperty","_value","setFormat","onKeyDown","event","key","last","value","substring","selectionStart","selectionEnd","setCursorAt","preventDefault","indexOf","keyCode","ctrlKey","metaKey","current","firstPart","secondPart","next","concat","replace","regEx","getRegEx","split","String","match","length","onClick","target","onInput","onValueChange","onBlur","Number","toFixed","toString","test","window","navigator","userAgent","evt","document","createEvent","initEvent","dispatchEvent","processCursorPosition","_newValue","_oldTotalComma","_newTotalComma","substr","position","setSelectionRange","focus","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","newValue","cursor","trim","removeLeadingZero","data","Directive","args","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","Input","HostListener","NgxNumberFormatModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, forwardRef, OnInit, ElementRef, Input, HostListener } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n    selector: '[ngxNumberFormat]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxNumberFormatDirective),\n            multi: true\n        }\n    ]\n})\nexport class NgxNumberFormatDirective implements ControlValueAccessor, OnInit {\n\n    private _oldValueForDetectChange: string = null;\n    private _oldValue: string = null;\n    private _displayValue: string = null;\n    private _max: number = 0;\n    private _decimal: number = 0;\n    private _format: boolean = false;\n    private _formElement: HTMLInputElement;\n    private _specialKeys: Array<string> = ['Backspace', 'Tab', 'End', 'Home', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', 'Delete'];\n    private _regExNumber: RegExp = new RegExp(/^[0-9]*$/g);\n    private _regExNumberAndDecimal: RegExp = new RegExp(/^[0-9]+(\\.[0-9]*){0,1}$/g);\n    private _oldSelectionStart: number = 0;\n    private _detectDelete: boolean = false;\n    private _detectBackspace: boolean = false;\n    private _detectSelectAll: boolean = false;\n    private _process: boolean = false;\n\n    public onChange = (_: any) => { };\n    public onTouch = () => { };\n\n    constructor(private el: ElementRef) { }\n\n    ngOnInit() {\n        this._formElement = this.el.nativeElement;\n    }\n\n    @Input('ngxNumberFormat')\n    public set initialize(_value: string) {\n        this.setFormat(_value);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n\n        if (this._process) {\n            if (event.key == 'Backspace') {\n                this._detectBackspace = true;\n                let last: string = this._formElement.value.substring(this._formElement.selectionStart - 1, this._formElement.selectionStart);\n                if (this._formElement.selectionStart == this._formElement.selectionEnd && last == ',') {\n                    this.setCursorAt(this._formElement.selectionStart - 1);\n                    event.preventDefault();\n                }\n            } else {\n                this._detectBackspace = false;\n            }\n    \n            if (event.key == 'Delete') {\n                this._detectDelete = true;\n                let last: string = this._formElement.value.substring(this._formElement.selectionEnd, this._formElement.selectionEnd + 1);\n                if (this._formElement.selectionStart == this._formElement.selectionEnd && last == ',') {\n                    this.setCursorAt(this._formElement.selectionEnd + 1);\n                    event.preventDefault();\n                }\n            } else {\n                this._detectDelete = false;\n            }\n    \n            if (\n                this._specialKeys.indexOf(event.key) !== -1\n                || (event.keyCode === 65 && (event.ctrlKey || event.metaKey)) // Allow: Ctrl + A\n                || (event.keyCode === 67 && (event.ctrlKey || event.metaKey)) // Allow: Ctrl + C\n                || (event.keyCode === 86 && (event.ctrlKey || event.metaKey)) // Allow: Ctrl + V\n                || (event.keyCode === 88 && (event.ctrlKey || event.metaKey)) // Allow: Ctrl + X\n            ) {\n                return;\n            }\n    \n            let current: string = this.el.nativeElement.value;\n            let firstPart: string = current.substring(0, this._formElement.selectionStart);\n            let secondPart: string = current.substring(this._formElement.selectionEnd);\n            let next: string = (firstPart.concat(event.key) + secondPart).replace(/,/g, '');\n    \n            let regEx = this.getRegEx();\n    \n            let value = next.split('.');\n            if (next && !String(next).match(regEx) || (value[0].length > this._max && this._formElement.selectionStart == this._formElement.selectionEnd) || (this._decimal > 0 && value.length == 2 && (value[1].length > this._decimal && this._formElement.selectionStart == this._formElement.selectionEnd))) {\n                event.preventDefault();\n            } else {\n                this._oldSelectionStart = this._formElement.selectionStart;\n                this._oldValue = this._formElement.value;\n            }\n        }\n\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event): void {\n        this._oldSelectionStart = this._formElement.selectionStart;\n        this._oldValue = this._formElement.value;\n        this._oldValueForDetectChange = event.target.value;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(event): void {\n        let value = event.target.value;\n\n        if (this._process) {\n            if (value && !String(value).replace(/,/g, '').match(this.getRegEx())) {\n                this._formElement.value = '';\n            } else {\n                if (this._detectBackspace || this._detectDelete) {\n                    this._oldSelectionStart = this._formElement.selectionStart - 1;\n                    this._oldValue = this._formElement.value;\n                }\n                this.onValueChange(value);\n            }\n        }\n\n    }\n\n    @HostListener('blur', ['$event'])\n    public onBlur(event): void {\n        let value = event.target.value;\n\n        if (value.length > 0 && this._decimal > 0) {\n            value = value.replace(/,/g, '');\n            value = Number(value).toFixed(this._decimal).toString();\n            this._formElement.value = value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n        this.onTouch();\n\n        // Fix bug on Internet Explorer and Microsoft Edge not fire change event when set value to input element by javascript.\n        let isIEOrEdge = /msie\\s|trident\\/|edge\\//i.test(window.navigator.userAgent);\n        if (isIEOrEdge && (value != this._oldValueForDetectChange)) {\n            var evt = document.createEvent(\"HTMLEvents\");\n            evt.initEvent(\"change\", false, true);\n            event.target.dispatchEvent(evt);\n        }\n    }\n\n    processCursorPosition(_oldValue: string, _oldSelectionStart: number, _newValue: string) {\n        let _oldTotalComma = 0;\n        let _newTotalComma = 0;\n        if (_newValue) {\n            _oldValue = _oldValue.substr(0, _oldSelectionStart);\n            _oldTotalComma = (_oldValue.match(/,/g) || []).length;\n            _newValue = _newValue.substr(0, _oldSelectionStart + 1);\n            _newTotalComma = (_newValue.match(/,/g) || []).length;\n            this.setCursorAt(_oldSelectionStart + 1 + (_newTotalComma - _oldTotalComma));\n        }\n    }\n\n    setCursorAt(position: number): void {\n        if (this._formElement.setSelectionRange) {\n            this._formElement.focus();\n            this._formElement.setSelectionRange(position, position);\n        }\n    }\n\n    writeValue(value: any): void {\n\n        if (value != null && value != '') {\n            if (typeof (value) === 'string') {\n                value = value.replace(/,/g, '');\n            } else {\n                value = value.toString();\n            }\n        }\n\n        this.onValueChange(value, false);\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    setDisabledState?(value: boolean): void {\n        this._formElement.disabled = value;\n    }\n\n    private onValueChange(newValue: string, cursor: boolean = true) {\n\n        if (newValue !== this._displayValue && this._process) {\n            let value;\n\n            if ((newValue == null) || (newValue.trim() === '')) {\n                value = '';\n            } else {\n                value = newValue.replace(/,/g, '');\n                value = this.removeLeadingZero(value);\n            }\n\n\n            if (this._format) {\n                this._displayValue = value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            } else {\n                this._displayValue = value;\n            }\n\n\n\n            this._formElement.value = this._displayValue;\n            this.onChange(value);\n            if (cursor) {\n                this.processCursorPosition(this._oldValue, this._oldSelectionStart, this._displayValue);\n            }\n        }\n    }\n\n    private removeLeadingZero(value: string): string {\n        if (value.indexOf('.') == -1) {\n            let convertVal = +value;\n            value = convertVal.toString();\n        }\n        return value;\n    }\n\n    private getRegEx(): RegExp {\n        return (this._decimal > 0) ? this._regExNumberAndDecimal : this._regExNumber;\n    }\n\n    private setFormat(_value: string) {\n\n        if (_value) {\n            this._process = true;\n        } else {\n            this._process = false;\n        }\n\n        if (_value.indexOf(',') !== -1) {\n            this._format = true;\n        } else {\n            this._format = false;\n        }\n        _value = _value.replace(/,/g, '');\n        let data = _value.split('.');\n\n        if (data.length == 1) {\n            this._max = data[0].length;\n        } else if (data.length == 2) {\n            this._max = data[0].length;\n            this._decimal = data[1].length;\n        }\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { NgxNumberFormatDirective } from './ngx-number-format.directive';\n\n\n\n@NgModule({\n  declarations: [NgxNumberFormatDirective],\n  exports: [NgxNumberFormatDirective]\n})\nexport class NgxNumberFormatModule { }\n"]}